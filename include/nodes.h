#pragma once

#include <optional>
#include <string>
#include <vector>

namespace parser {

enum class NodeType {
  PROGRAM,
  STATEMENT_CREATE_TABLE,
  STATEMENT_CREATE_DATABASE,
  // STATEMENT_CREATE_VIEW,
  // STATEMENT_CREATE_INDEX,
  // STATEMENT_CREATE_SCHEMA,
  STATEMENT_ALTER_TABLE,
  // STATEMENT_ALTER_VIEW,
  // STATEMENT_ALTER_INDEX,
  STATEMENT_DROP_TABLE,
  STATEMENT_DROP_DATABASE,
  STATEMENT_DROP_COLUMN,
  // STATEMENT_DROP_VIEW,
  // STATEMENT_DROP_INDEX,
  // STATEMENT_DROP_SCHEMA,
  // STATEMENT_TRUNCATE,
  STATEMENT_SELECT,
  STATEMENT_INSERT,
  STATEMENT_UPDATE,
  STATEMENT_DELETE,
  // STATEMENT_BEGIN_TRANSACTION,
  // STATEMENT_COMMIT,
  // STATEMENT_ROLLBACK,
  // STATEMENT_SAVEPOINT,
  // STATEMENT_SET_TRANSACTION,
  // STATEMENT_EXPLAIN,
  // STATEMENT_SHOW,
  STATEMENT_COMMENT,
  // STATEMENT_MERGE,
  // STATEMENT_WITH,
  // STATEMENT_LOCK_TABLE,
  CLAUSE_SELECT,
  CLAUSE_FROM,
  CLAUSE_WHERE,
  CLAUSE_GROUP_BY,
  CLAUSE_ORDER_BY,
  ORDER_LIST,
  ORDER_ITEM,
  CLAUSE_LIMIT,
  EXPRESSION,
  BINARY_OPERATION,
  UNARY_OPERATION,
  IDENTIFIER,
  TABLE_REF,
  ALIAS,
  TABLE_LIST,
  COLUMN_DEFINITION_LIST,
  COLUMN_DEFINITION,
  COLUMN_CONSTRAINT_LIST,
  COLUMN_CONSTRAINT,
  COLUMN_LIST,
  COLUMN_REF,
  COLUMNS_ALL,
  DATABASE_REF,
  ALTER_ACTION_LIST,
  SELECT_LIST,
  NULL_TYPE,
  LITERAL_INT,
  LITERAL_STRING,
  LITERAL_FLOAT,
  LITERAL_BOOL,
  TYPE_INT,
  TYPE_STRING,
  TYPE_FLOAT,
  TYPE_BOOL,
  TYPE_BLOB,
  TYPE_VARCHAR,
  VALUE_LIST,
  ASSIGNMENT_LIST,
  ASSIGNMENT,
  CONDITION,
  BIN_OP_SUBTRACT,
  BIN_OP_DIVIDE,
  BIN_OP_MULTIPLY,
  BIN_OP_ADD,
  BIN_OP_OR,
  BIN_OP_AND,
  BIN_OP_LIKE,
  BIN_OP_GREATER,
  BIN_OP_GREATER_EQUAL,
  BIN_OP_LESS,
  BIN_OP_LESS_EQUAL,
  BIN_OP_EQUAL,
  BIN_OP_NOT_EQUAL,
  UN_OP_SUBTRACT,
  UN_OP_NOT,
  ALTER_ACTION_ADD,
  ALTER_ACTION_DROP_COLUMN,
  ALTER_ACTION_RENAME_COLUMN,
  ALTER_ACTION_MODIFY_COLUMN,
  ALTER_ACTION_RENAME,

};

std::string NodeTypeToString(NodeType type);

class ASTNode {
public:
  NodeType type;
  std::vector<ASTNode> children;
  ASTNode(NodeType type) : type(type), value(std::nullopt) {};
  ASTNode(NodeType type, std::string value)
      : type(type), value(std::optional(value)) {};
  std::string ToString(int space);
  std::optional<std::string> value;
};
} // namespace parser
